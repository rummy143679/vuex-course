vuex : 
replace the provide and inject
used for state management

what and why :

what :
vuex is librery used for managing global state

state :(data)

local state :
the is effected in one components and managed by props passing or component communication

gloal state : 
that effects multiple app possibly entire app for this we use vuex

why :

maging app wide /global state management is easy by vuex


--------------------------------------------------------------------------------------------------------------

creating and using vue store :

'npm i vuex' to add package into vue project

creating store :
import createStore from vuex
create store object contains state method return object containe data
use the created store globally by app.use(store) method

main.js :
import { createApp } from 'vue';
import {createStore} from 'vuex'

import App from './App.vue';

const store = createStore({
    state(){
        return{
            count:'1'
        }
    }
})
const app = createApp(App);
app.use(store)

app.mount('#app');

using variable defind in store : 

app.js:
<template>
  <base-container title="Vuex">
  <h3>{{ $store.state.count }}</h3> // accessing by global store object of vue
  <button>Add 1</button>
</base-container>
</template>

-------------------------------------------------------------------------------------------------------
Introducing mutations :

mutations are used to controlle the state changes 
mutation internally get the state object

const store = createStore({
    state(){
        return{
            count:'1'
        }
    },
    mutations:{
        addOne(state){
            state.count++
        }
    }
})

trigger mutation : commit
we use commit for triggering the mutations with name(addOne) of method in mutions

<template>
    <button @click="increase">Inc</button>
</template>
<script>
export default {
    methods:{
        increase(){
            this.$store.commit('addOne')
        }
    }
}
</script>

-------------------------------------------------------------------------------------------------------
commit with pay load :

we can send any type of data as payload int,string,object

this.$store.commit('addSome',{value:10})
this.$store.commit('addSome',10)
this.$store.commit('addSome','string')

commite takes an object:
this.$store.commit({
    type:'addSome'
    value:10
})



in store : payload as object we recieve that object

addSome(state,payload){
    state.count += payload.value
}

-------------------------------------------------------------------------------------------------------
Getters : 
we can get states, not by directly accessing(using state object)
we can get state indirectly by getters and we can also modify them

getters:{
    finalCounter(state){
        return state.count*3
    },
    favoriteCount(state,getters){
        const final = getters.finalCounter
        if(final < 0){
            return 0 
        }
        if(final > 100){
            return 100
        }
        return final
    }
}

access getters by :
this.$store.getters.finalCounter
this.$store.getters.favoriteCount

-------------------------------------------------------------------------------------------------------

async code with actions :
better way is to use async code in actions then in mutations
actions can be dispatched based on the type in dispatch and method in actions
name of commit in action('addOne') is same as name in the mutations('addOne')
every method in action can get context object from vue.By using that context we commit the action

actions:{
    addOne(context){
        setTimeout(() => {
            context.commit('addOne')
        }, 1000);
    },
    addSome(context,payload){
        context.commit('addSome',payload)
    }
},

methods:{
  increase(){
    this.$store.dispatch('addOne')
  }
}

---------------
note : context object
console.log(context)
context object have full information of that action include
commit : to commite action
dispatch : to dispatch the action that we got from dispatch to anothe action
getters : 
state :  to directly acces the state of object but we dont have to chnage them in actions
rootGetters :
rootState:

---------------
-------------------------------------------------------------------------------------------------------
mapper Helpers : 

import map helpers 
import { mapGetters,mapActions} from 'vuex'

actions helper : 
 mapActions cn take single or array of actions

<template>
  <button @click="addSome({ value: 10 })">Inc</button> //we can payload here
</template>

import { mapActions } from 'vuex';
export default {
  methods: {
    ...mapActions(['addSome']),
  },
};

 map getters: 
getters can take array of Getters

<h3>{{ finalCounter }}</h3>//using computed property

import { mapGetters } from 'vuex';
export default {
  computed: {
    // counter() {
    //   return this.$store.getters.finalCounter;
    // },
    ...mapGetters(['finalCounter']),
  },
};

----------------------------------------------------------------------------------------------------------------
modules :
we have different individual modules that can be used in create store 

const counterModule = {
  state() {
    return {
      count: 1,
    };
  },
  mutations: {
    addOne(state, payload) {
      state.count += payload.value;
    },
    addSome(state, payload) {
      state.count += payload.value;
    },
  },
  getters: {
    finalCounter(state) {
      return state.count * 3;
    },
    favoriteCount(state, getters) {
      const final = getters.finalCounter;
      if (final < 0) {
        return 0;
      }
      if (final > 100) {
        return 100;
      }
      return final;
    },
  },
  actions: {
    addOne(context, payload) {
      setTimeout(() => {
        context.commit('addOne', payload);
      }, 1000);
    },
    addSome(context, payload) {
      console.log(context);
      context.commit('addSome', payload);
    },
  },
};

use this :
modules: {
    number: counterModule,
  },modules: {
    number: counterModule,
  },


------------------------------------------------------------------------------------------------------------
-------------------------
local module state : 
if a state in module is not accessed out side that module
local modules can be accessed by using rootState,rootGetters
-------------------------
------------------------------------------------------------------------------------------------------------
name space :
it is used to acces local state action,getters effected
make namespaced = true in local module
const counterModule = {
  namespaced: true,
  state() {
    return {
      count: 1,
    };
  },

type1 :using store.getters
counter(){
        return this.$store.getters['number/favoriteCount']
    }

type2:using map helpers
...mapGetters('number', ['favoriteCount']),
------------------------------------------------------------------------------------------------------------